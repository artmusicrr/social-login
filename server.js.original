// Backend para processamento de downloads de vídeos YouTube usando yt-dlp
const express = require('express');
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 4001; // Mudando para porta 4001

// Middleware para processar JSON
app.use(express.json());

// Pasta para downloads
const DOWNLOADS_DIR = path.join(__dirname, 'public', 'downloads');

// Garantir que a pasta de downloads existe
if (!fs.existsSync(DOWNLOADS_DIR)) {
  fs.mkdirSync(DOWNLOADS_DIR, { recursive: true });
}

// Servir arquivos estáticos da pasta 'public'
app.use(express.static(path.join(__dirname, 'public')));

// Endpoint para processar downloads
app.post('/api/youtube/download', (req, res) => {
  const { videoUrl, formatId, outputPath } = req.body;
  
  if (!videoUrl || !formatId) {
    return res.status(400).json({
      success: false,
      error: 'URL do vídeo e formato são obrigatórios'
    });
  }
  
  // Formata o caminho de saída para ser salvo na pasta de downloads
  const baseOutputPath = path.join(DOWNLOADS_DIR, path.basename(outputPath || 'video'));
  console.log(`Iniciando download: ${videoUrl}`);
  console.log(`Formato: ${formatId}`);
  console.log(`Caminho de saída: ${baseOutputPath}`);
  
  // Simplifica a seleção de formato para evitar problemas de mesclagem
  let ytdlpFormat;
  switch (formatId) {
    case 'best':
    case 'video-fullhd':
      ytdlpFormat = 'best[ext=mp4]/bestvideo[ext=mp4]+bestaudio[ext=m4a]/best';
      break;
    case 'video-hd':
      ytdlpFormat = 'best[height<=720][ext=mp4]/bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best';
      break;
    case 'video-sd':
      ytdlpFormat = 'best[height<=480][ext=mp4]/bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]/best';
      break;
    case 'audio':
      ytdlpFormat = 'bestaudio[ext=m4a]/bestaudio';
      break;
    default:
      ytdlpFormat = 'best[ext=mp4]/bestvideo[ext=mp4]+bestaudio[ext=m4a]/best';
  }
  
  // Detecta se está rodando no Windows para ajustar o comando
  const isWindows = process.platform === 'win32';
  
  // Formata o caminho de saída conforme o sistema operacional
  const safeOutputDir = isWindows 
    ? DOWNLOADS_DIR.replace(/\\/g, '\\\\') // Escapa backslashes para Windows
    : DOWNLOADS_DIR.replace(/\\/g, '/');   // Converte para forward slashes para WSL/Linux
  
  // Define um nome de arquivo customizado para o download
  const customFileName = `downloaded_video_${Date.now()}`;
  
  // Comando ajustado conforme a plataforma
  let command;
  if (isWindows) {
    // No Windows, usa o comando yt-dlp direto (assumindo que está no PATH)
    command = `yt-dlp "${videoUrl}" -f "${ytdlpFormat}" -o "${safeOutputDir}\\${customFileName}.%(ext)s" --merge-output-format mp4 --no-playlist --restrict-filenames --print filename`;
  } else {
    // No Linux/WSL, usa python3 -m yt_dlp
    command = `python3 -m yt_dlp "${videoUrl}" -f "${ytdlpFormat}" -o "${safeOutputDir}/${customFileName}.%(ext)s" --merge-output-format mp4 --no-playlist --restrict-filenames --print filename`;
  }
  
  console.log(`Sistema operacional: ${process.platform}`);
  console.log(`Executando comando: ${command}`);
  
  exec(command, (error, stdout, stderr) => {
    if (error) {
      console.error(`Erro na execução: ${error.message}`);
      return res.status(500).json({
        success: false,
        error: `Erro ao executar o script: ${error.message}`
      });
    }
    
    if (stderr) {
      console.error(`Stderr: ${stderr}`);
    }
    
    console.log(`Resultado: ${stdout}`);
    
    // Verifica se o arquivo foi gerado
    try {
      // Tenta extrair o nome do arquivo da saída do yt-dlp
      const outputLines = stdout.trim().split('\n');
      const lastLine = outputLines[outputLines.length - 1];
      
      console.log(`Arquivo indicado pelo yt-dlp: ${lastLine}`);
      
      // Verifica se o arquivo existe
      if (lastLine && fs.existsSync(lastLine)) {
        console.log(`Arquivo encontrado: ${lastLine}`);
        // Extrai apenas o nome do arquivo do caminho completo
        const fileName = path.basename(lastLine);
        // Caminho relativo para o frontend
        const filePath = `/downloads/${fileName}`;
        
        return res.json({
          success: true,
          fileName: fileName,
          filePath: filePath
        });
      } else {
        // Verifica se o arquivo está diretamente na pasta de downloads
        const downloadFilePath = path.join(DOWNLOADS_DIR, `${customFileName}.mp4`);
        if (fs.existsSync(downloadFilePath)) {
          console.log(`Arquivo encontrado em downloads: ${downloadFilePath}`);
          const fileName = path.basename(downloadFilePath);
          const filePath = `/downloads/${fileName}`;
          
          return res.json({
            success: true,
            fileName: fileName,
            filePath: filePath
          });
        }
        
        console.log(`Buscando arquivo mais recente na pasta de downloads...`);
        const files = fs.readdirSync(DOWNLOADS_DIR);
        
        if (files.length === 0) {
          console.log(`Pasta de downloads vazia.`);
          return res.status(404).json({
            success: false,
            error: 'Nenhum arquivo encontrado na pasta de downloads'
          });
        }
        
        // Pega o arquivo mais recentemente modificado na pasta de downloads
        const mostRecentFile = files
          .map(file => ({
            name: file,
            time: fs.statSync(path.join(DOWNLOADS_DIR, file)).mtime.getTime()
          }))
          .sort((a, b) => b.time - a.time)[0];
        
        if (mostRecentFile) {
          console.log(`Arquivo mais recente encontrado: ${mostRecentFile.name}`);
          const fileName = mostRecentFile.name;
          // Caminho relativo para o frontend
          const filePath = `/downloads/${fileName}`;
          
          return res.json({
            success: true,
            fileName: fileName,
            filePath: filePath
          });
        } else {
          console.log(`Nenhum arquivo encontrado.`);
          return res.status(404).json({
            success: false,
            error: 'Arquivo não encontrado após o download'
          });
        }
      }
    } catch (err) {
      console.error('Erro ao verificar arquivo:', err);
      return res.status(500).json({
        success: false,
        error: `Erro ao verificar o arquivo: ${err.message}`
      });
    }
  });
});

// Iniciar o servidor
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
